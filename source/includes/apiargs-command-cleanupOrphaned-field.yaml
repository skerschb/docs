arg_name: field
description: |
  The namespace, i.e. both the database and the collection name, of the
  sharded collection for which to clean the orphaned data.
interface: command
name: cleanupOrphaned
operation: cleanupOrphaned
optional: false
position: 1
type: string
---
arg_name: field
description: |
  The :term:`shard key` value that determines the lower bound of the
  cleanup range. The default value is ``MinKey``.

  If the range that contains the specified ``startingFromKey`` value
  belongs to a chunk owned by the shard, :dbcommand:`cleanupOrphaned`
  continues to examine the next ranges until it finds a range not owned
  by the shard. See :ref:`cleanupOrphaned-determine-range` for details.
interface: command
name: startingFromKey
operation: cleanupOrphaned
optional: true
position: 2
type: document
---
arg_name: field
description: |
  If ``true``, each delete operation must be replicated to another
  secondary before the cleanup operation proceeds further. If
  ``false``, do not wait for replication. Defaults to ``false``.

  Independent of the ``secondaryThrottle`` setting, after the final
  delete, :dbcommand:`cleanupOrphaned` waits for all deletes to
  replicate to a majority of replica set members before returning.
interface: command
name: secondaryThrottle
operation: cleanupOrphaned
optional: true
position: 3
type: boolean
---
arg_name: field
description: |
  A document that expresses the :doc:`write concern
  </reference/write-concern>` that the ``secondaryThrottle`` will use to
  wait for the secondaries when removing orphaned data.

  Any specified ``writeConcern`` implies ``secondaryThrottle``.
interface: command
name: writeConcern
operation: cleanupOrphaned
optional: true
position: 4
type: document
...
