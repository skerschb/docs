=====================================
Convert a Standalone to a Replica Set
=====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This tutorial describes the process for converting a :term:`standalone`
:binary:`~bin.mongod` instance into a :term:`replica set`. Use
standalone instances for testing and development, but always use
replica sets in production. To install a standalone instance, see the
:ref:`installation tutorials <tutorials-installation>`.

To deploy a replica set without using a pre-existing
:binary:`~bin.mongod` instance, see :doc:`/tutorial/deploy-replica-set`
instead.

Procedure
---------

#. Shut down the :term:`standalone` :binary:`~bin.mongod` instance.

#. Restart the instance. Use the :option:`--replSet <mongod --replSet>`
   option to specify the name of the new replica set.

   For example, the following command starts a standalone instance as a
   member of a new replica set named ``rs0``. The command uses the
   standalone's existing database path of ``/srv/mongodb/db0``:

   .. include:: /includes/warning-bind-ip-security-considerations.rst

   .. code-block:: sh

      mongod --port 27017 --dbpath /srv/mongodb/db0 --replSet rs0 --bind_ip localhost,<ip address of the mongod host>

   .. include:: /includes/fact-unique-replica-set-names.rst

   If converting a shard standalone instance to a shard replica set,
   the shard replica set name must not use the same name as the config
   server replica set.

   For more information on configuration options, see
   :doc:`/reference/configuration-options` and the :binary:`~bin.mongod`
   manual page.

#. Connect a :binary:`~bin.mongo` shell to the :binary:`~bin.mongod` instance.

#. Use :method:`rs.initiate()` to initiate the new replica set:

   .. code-block:: javascript

      rs.initiate()

   The replica set is now operational. To view the replica set
   configuration, use :method:`rs.conf()`. To check the status of the
   replica set, use :method:`rs.status()`.

   .. important::

      If converting a shard standalone instance to a shard replica set, you
      must also :ref:`update the shard information <update-shard-host-info>`.

To add members to this replica set, use the :method:`rs.add()` method.
For more information on adding members to a replica set, see
:doc:`/tutorial/expand-replica-set`.

.. _update-shard-host-info:

Sharding Considerations
~~~~~~~~~~~~~~~~~~~~~~~

If the new replica set is a shard replica set, change the shard
information in the :term:`config database` by doing the following:

#. Connect to one of the sharded cluster's :binary:`~bin.mongos`
   instances and retrieve the shard information:

   .. code-block:: javascript

      var myShard = db.getSiblingDB("config").shards.findOne( { _id: "<name>"} )

   Replace ``<name>`` with the name of the shard.

   .. note:: 

      The ``<name>`` of the shard is separate from the shard replica
      set name. To retrieve the name of the shard, see the
      :data:`shards <sh.status.shards._id>` section in the results from
      the :method:`sh.status()` method.

#. Update the ``host`` information with the replica set information:

   .. code-block:: javascript

      myShard.host = "<replica-set>/<member,><member,><...>"

   Replace ``<replica-set>`` with the name of the replica set. Replace
   ``<member,><member,><...>`` with the list of the replica set members.

#. Save the information.

   .. code-block:: javascript

      db.getSiblingDB("config").shards.save( myShard )

#. Restart all :binary:`~bin.mongos` instances and all shard binaries.

